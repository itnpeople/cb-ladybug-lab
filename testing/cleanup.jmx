<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="변수정의" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;HOST&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">localhost</stringProp>
          </elementProp>
          <elementProp name="PORT_SPIDER" elementType="Argument">
            <stringProp name="Argument.name">PORT_SPIDER</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;PORT_SPIDER&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1024</stringProp>
          </elementProp>
          <elementProp name="PORT_TUMBLEBUG" elementType="Argument">
            <stringProp name="Argument.name">PORT_TUMBLEBUG</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;PORT_TUMBLEBUG&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1323</stringProp>
          </elementProp>
          <elementProp name="PORT_MCKS" elementType="Argument">
            <stringProp name="Argument.name">PORT_MCKS</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;PORT_MCKS&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1470</stringProp>
          </elementProp>
          <elementProp name="H_AUTH" elementType="Argument">
            <stringProp name="Argument.name">H_AUTH</stringProp>
            <stringProp name="Argument.value">Basic ZGVmYXVsdDpkZWZhdWx0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NAMESPACE" elementType="Argument">
            <stringProp name="Argument.name">NAMESPACE</stringProp>
            <stringProp name="Argument.value">acornsoft</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">CB 네임스페이스</stringProp>
          </elementProp>
          <elementProp name="CSP_1" elementType="Argument">
            <stringProp name="Argument.name">CSP_1</stringProp>
            <stringProp name="Argument.value">aws</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">aws</stringProp>
          </elementProp>
          <elementProp name="CSP_2" elementType="Argument">
            <stringProp name="Argument.name">CSP_2</stringProp>
            <stringProp name="Argument.value">gcp</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSP_3" elementType="Argument">
            <stringProp name="Argument.name">CSP_3</stringProp>
            <stringProp name="Argument.value">azure</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSP_4" elementType="Argument">
            <stringProp name="Argument.name">CSP_4</stringProp>
            <stringProp name="Argument.value">alibaba</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSP_5" elementType="Argument">
            <stringProp name="Argument.name">CSP_5</stringProp>
            <stringProp name="Argument.value">tencent</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="_CSP_6" elementType="Argument">
            <stringProp name="Argument.name">_CSP_6</stringProp>
            <stringProp name="Argument.value">ibm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="_CSP_7" elementType="Argument">
            <stringProp name="Argument.name">_CSP_7</stringProp>
            <stringProp name="Argument.value">openstack</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="REGION" elementType="Argument">
            <stringProp name="Argument.name">REGION</stringProp>
            <stringProp name="Argument.value">tokyo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">지역(tokyo, seoul, usca, london, singapore</stringProp>
          </elementProp>
          <elementProp name="AZURE_RG" elementType="Argument">
            <stringProp name="Argument.name">AZURE_RG</stringProp>
            <stringProp name="Argument.value">cb-mcks</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">리소스 그룹</stringProp>
          </elementProp>
          <elementProp name="CLUSTER" elementType="Argument">
            <stringProp name="Argument.name">CLUSTER</stringProp>
            <stringProp name="Argument.value">cb-cluster</stringProp>
            <stringProp name="Argument.desc">클러스터 이름</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AWS_SECRET_ID" elementType="Argument">
            <stringProp name="Argument.name">AWS_SECRET_ID</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;AWS_SECRET_ID&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AWS_SECRET_KEY" elementType="Argument">
            <stringProp name="Argument.name">AWS_SECRET_KEY</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;AWS_SECRET_KEY&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GCP_PROJECT" elementType="Argument">
            <stringProp name="Argument.name">GCP_PROJECT</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;GCP_PROJECT&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GCP_PKEY" elementType="Argument">
            <stringProp name="Argument.name">GCP_PKEY</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;GCP_PKEY&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GCP_SA" elementType="Argument">
            <stringProp name="Argument.name">GCP_SA</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;GCP_SA&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AZURE_SUBSCRIPTION_ID" elementType="Argument">
            <stringProp name="Argument.name">AZURE_SUBSCRIPTION_ID</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;AZURE_SUBSCRIPTION_ID&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AZURE_TENANT_ID" elementType="Argument">
            <stringProp name="Argument.name">AZURE_TENANT_ID</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;AZURE_TENANT_ID&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AZURE_CLIENT_ID" elementType="Argument">
            <stringProp name="Argument.name">AZURE_CLIENT_ID</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;AZURE_CLIENT_ID&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AZURE_CLIENT_SECRET" elementType="Argument">
            <stringProp name="Argument.name">AZURE_CLIENT_SECRET</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;AZURE_CLIENT_SECRET&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ALIBABA_SECRET_ID" elementType="Argument">
            <stringProp name="Argument.name">ALIBABA_SECRET_ID</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;ALIBABA_SECRET_ID&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ALIBABA_SECRET_KEY" elementType="Argument">
            <stringProp name="Argument.name">ALIBABA_SECRET_KEY</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;ALIBABA_SECRET_KEY&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TENCENT_SECRET_ID" elementType="Argument">
            <stringProp name="Argument.name">TENCENT_SECRET_ID</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;TENCENT_SECRET_ID&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TENCENT_SECRET_KEY" elementType="Argument">
            <stringProp name="Argument.name">TENCENT_SECRET_KEY</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;TENCENT_SECRET_KEY&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OS_AUTH_URL" elementType="Argument">
            <stringProp name="Argument.name">OS_AUTH_URL</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;OS_AUTH_URL&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OS_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">OS_USERNAME</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;OS_USERNAME&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OS_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">OS_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;OS_PASSWORD&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OS_USER_DOMAIN_NAME" elementType="Argument">
            <stringProp name="Argument.name">OS_USER_DOMAIN_NAME</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;OS_USER_DOMAIN_NAME&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OS_PROJECT_ID" elementType="Argument">
            <stringProp name="Argument.name">OS_PROJECT_ID</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;OS_PROJECT_ID&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OS_REGION_NAME" elementType="Argument">
            <stringProp name="Argument.name">OS_REGION_NAME</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;OS_REGION_NAME&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IBM_API_KEY" elementType="Argument">
            <stringProp name="Argument.name">IBM_API_KEY</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;IBM_API_KEY&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AWS_SPEC" elementType="Argument">
            <stringProp name="Argument.name">AWS_SPEC</stringProp>
            <stringProp name="Argument.value">t2.medium</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GCP_SPEC" elementType="Argument">
            <stringProp name="Argument.name">GCP_SPEC</stringProp>
            <stringProp name="Argument.value">e2-highcpu-4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AZURE_SPEC" elementType="Argument">
            <stringProp name="Argument.name">AZURE_SPEC</stringProp>
            <stringProp name="Argument.value">Standard_B2s</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ALIBABA_SPEC" elementType="Argument">
            <stringProp name="Argument.name">ALIBABA_SPEC</stringProp>
            <stringProp name="Argument.value">ecs.t5-lc1m2.large</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TENCENT_SPEC" elementType="Argument">
            <stringProp name="Argument.name">TENCENT_SPEC</stringProp>
            <stringProp name="Argument.value">S5.LARGE8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OPENSTACK_SPEC" elementType="Argument">
            <stringProp name="Argument.name">OPENSTACK_SPEC</stringProp>
            <stringProp name="Argument.value">m1.medium</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IBM_SPEC" elementType="Argument">
            <stringProp name="Argument.name">IBM_SPEC</stringProp>
            <stringProp name="Argument.value">bx2-2x8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="변수재정의" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">if(vars.get(&quot;HOST&quot;).equals(&quot;&quot;)) 			vars.put(&quot;HOST&quot;,			&quot;localhost&quot;);
if(vars.get(&quot;PORT_SPIDER&quot;).equals(&quot;&quot;))		vars.put(&quot;PORT_SPIDER&quot;,		&quot;1024&quot;);
if(vars.get(&quot;PORT_TUMBLEBUG&quot;).equals(&quot;&quot;))	vars.put(&quot;PORT_TUMBLEBUG&quot;,	&quot;1323&quot;);
if(vars.get(&quot;PORT_MCKS&quot;).equals(&quot;&quot;))		vars.put(&quot;PORT_MCKS&quot;,		&quot;1470&quot;);
vars.put(&quot;StatusCode&quot;,&quot;500&quot;);</stringProp>
      </BeanShellPostProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="시험그룹" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="디버그" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="&lt;Connection Info.&gt;" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NS 조회" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_TUMBLEBUG}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tumblebug/ns/${NAMESPACE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${H_AUTH}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NS 존재하지 않으면 생성" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;StatusCode&quot;)!=&quot;200&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NS 생성" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;name&quot;        : &quot;${NAMESPACE}&quot;,&#xd;
	&quot;description&quot; : &quot;acornsoft namespace&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT_TUMBLEBUG}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/tumblebug/ns</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${H_AUTH}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답초기화" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">prev.setResponseOK();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach CSP" enabled="true">
            <stringProp name="ForeachController.inputVal">CSP</stringProp>
            <stringProp name="ForeachController.returnVal">CSP</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="변수정의" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String c_region = &quot;&quot;;
String c_zone = &quot;&quot;;
if(&quot;${CSP}&quot;.equals(&quot;aws&quot;)) {
	if (&quot;${REGION}&quot;.equals(&quot;seoul&quot;))		{ c_region = &quot;ap-northeast-2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;tokyo&quot;))		{ c_region = &quot;ap-northeast-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;singapore&quot;))	{ c_region = &quot;ap-southeast-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;usca&quot;)) 		{ c_region = &quot;us-west-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;london&quot;))		{ c_region = &quot;eu-west-2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;india&quot;))		{ c_region = &quot;ap-south-1&quot;; }
	c_zone = c_region + &quot;a&quot;;
}

if(&quot;${CSP}&quot;.equals(&quot;gcp&quot;)) {
	if (&quot;${REGION}&quot;.equals(&quot;seoul&quot;))		{ c_region = &quot;asia-northeast3&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;tokyo&quot;))		{ c_region = &quot;asia-northeast1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;singapore&quot;))	{ c_region = &quot;asia-southeast1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;usca&quot;)) 		{ c_region = &quot;us-west2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;london&quot;))		{ c_region = &quot;europe-west2&quot;; }
	c_zone = c_region + &quot;-a&quot;;
}

if(&quot;${CSP}&quot;.equals(&quot;azure&quot;)) {
	if (&quot;${REGION}&quot;.equals(&quot;seoul&quot;))		{ c_region = &quot;koreacentral&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;tokyo&quot;))		{ c_region = &quot;japaneast&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;singapore&quot;))	{ c_region = &quot;southeastasia&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;usca&quot;)) 		{ c_region = &quot;westus&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;london&quot;))		{ c_region = &quot;uksouth&quot;; }
	c_zone = &quot;*&quot;;
}

if(&quot;${CSP}&quot;.equals(&quot;alibaba&quot;)) {
//	if (&quot;${REGION}&quot;.equals(&quot;seoul&quot;))		{ c_region = &quot;&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;tokyo&quot;))		{ c_region = &quot;ap-northeast-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;singapore&quot;))	{ c_region = &quot;ap-southeast-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;usca&quot;)) 		{ c_region = &quot;us-west-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;london&quot;))		{ c_region = &quot;eu-west-1&quot;; }
	c_zone = c_region + &quot;a&quot;;
}

if(&quot;${CSP}&quot;.equals(&quot;tencent&quot;)) {
	if (&quot;${REGION}&quot;.equals(&quot;seoul&quot;))		{ c_region = &quot;ap-seoul&quot;;			c_zone = c_region + &quot;-2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;tokyo&quot;))		{ c_region = &quot;ap-tokyo&quot;;			c_zone = c_region + &quot;-2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;singapore&quot;))	{ c_region = &quot;ap-singapore&quot;;		c_zone = c_region + &quot;-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;usca&quot;)) 		{ c_region = &quot;na-siliconvalley&quot;;	c_zone = c_region + &quot;-2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;london&quot;))		{ c_region = &quot;eu-frankfurt&quot;;		c_zone = c_region + &quot;-1&quot;; }
}

if(&quot;${CSP}&quot;.equals(&quot;ibm&quot;)) {
	if (&quot;${REGION}&quot;.equals(&quot;seoul&quot;))		{ c_region = &quot;kr-seo&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;tokyo&quot;))		{ c_region = &quot;jp-tok&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;singapore&quot;))	{ c_region = &quot;&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;usca&quot;)) 		{ c_region = &quot;&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;london&quot;))		{ c_region = &quot;eu-gb&quot;; }
	c_zone = c_region + &quot;a&quot;;
}

if(&quot;${CSP}&quot;.equals(&quot;openstack&quot;)) {
	c_region	= &quot;${OS_REGION_NAME}&quot;;
	c_zone	= c_region;
}


vars.put(&quot;CSP_UPPER&quot;, 	&quot;${CSP}&quot;.toUpperCase());
vars.put(&quot;c_CONFIG&quot;, 	&quot;config-${CSP}-${REGION}&quot;);
vars.put(&quot;c_REGION&quot;,	c_region);
vars.put(&quot;c_ZONE&quot;,		c_zone);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${CSP_UPPER} Driver 조회" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/spider/driver/${CSP}-driver-v1.0</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Driver 없다면" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;StatusCode&quot;)!=&quot;200&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${CSP_UPPER} Driver 생성" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;DriverName&quot;        : &quot;${CSP}-driver-v1.0&quot;,&#xd;
&quot;ProviderName&quot;      : &quot;${CSP_UPPER}&quot;,&#xd;
&quot;DriverLibFileName&quot; : &quot;${CSP}-driver-v1.0.so&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/spider/driver</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${CSP_UPPER} Region 조회" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/spider/region/region-${CSP}-${REGION}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Region 없다면" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;StatusCode&quot;)!=&quot;200&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="AZURE면" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;CSP&quot;) == &quot;azure&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AZURE Region 생성" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;RegionName&quot;       : &quot;region-${CSP}-${REGION}&quot;,&#xd;
&quot;ProviderName&quot;     : &quot;${CSP_UPPER}&quot;, &#xd;
&quot;KeyValueInfoList&quot; : [&#xd;
	{&quot;Key&quot; : &quot;location&quot;,      &quot;Value&quot; : &quot;${c_REGION}&quot;},&#xd;
	{&quot;Key&quot; : &quot;ResourceGroup&quot;, &quot;Value&quot; : &quot;${AZURE_RG}&quot;}&#xd;
]}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/spider/region</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="AZURE가 아니먄" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;CSP&quot;) != &quot;azure&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${CSP_UPPER} Region 생성" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;RegionName&quot;       : &quot;region-${CSP}-${REGION}&quot;,&#xd;
&quot;ProviderName&quot;     : &quot;${CSP_UPPER}&quot;, &#xd;
&quot;KeyValueInfoList&quot; : [&#xd;
	{&quot;Key&quot; : &quot;Region&quot;, &quot;Value&quot; : &quot;${c_REGION}&quot;},&#xd;
	{&quot;Key&quot; : &quot;Zone&quot;,   &quot;Value&quot; : &quot;${c_ZONE}&quot;}&#xd;
]}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/spider/region</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${CSP_UPPER} Credential 조회" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/spider/credential/credential-${CSP}-${REGION}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Credential 없다면" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;StatusCode&quot;)!=&quot;200&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If AWS" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;CSP&quot;)==&quot;aws&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AWS Credential생성" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;CredentialName&quot;   : &quot;credential-${CSP}-${REGION}&quot;,&#xd;
&quot;ProviderName&quot;     : &quot;${CSP_UPPER}&quot;,&#xd;
&quot;KeyValueInfoList&quot; : [&#xd;
    {&quot;Key&quot; : &quot;ClientId&quot;,     &quot;Value&quot; : &quot;${AWS_SECRET_ID}&quot;},&#xd;
    {&quot;Key&quot; : &quot;ClientSecret&quot;, &quot;Value&quot; : &quot;${AWS_SECRET_KEY}&quot;}&#xd;
]}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/spider/credential</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If GCP" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;CSP&quot;)==&quot;gcp&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">true</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GCP Credential생성" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;CredentialName&quot;   : &quot;credential-${CSP}-${REGION}&quot;,&#xd;
&quot;ProviderName&quot;     : &quot;${CSP_UPPER}&quot;,&#xd;
&quot;KeyValueInfoList&quot; : [&#xd;
    {&quot;Key&quot; : &quot;ClientEmail&quot;, &quot;Value&quot; : &quot;${GCP_SA}&quot;},&#xd;
    {&quot;Key&quot; : &quot;ProjectID&quot;,   &quot;Value&quot; : &quot;${GCP_PROJECT}&quot;},&#xd;
    {&quot;Key&quot; : &quot;PrivateKey&quot;,  &quot;Value&quot; : &quot;${GCP_PKEY}&quot;}&#xd;
]}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/spider/credential</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If AZURE" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;CSP&quot;)==&quot;azure&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">true</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AZURE Credential생성" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;CredentialName&quot;   : &quot;credential-${CSP}-${REGION}&quot;,&#xd;
&quot;ProviderName&quot;     : &quot;${CSP_UPPER}&quot;,&#xd;
&quot;KeyValueInfoList&quot; : [&#xd;
    {&quot;Key&quot; : &quot;ClientId&quot;,       &quot;Value&quot; : &quot;${AZURE_CLIENT_ID}&quot;},&#xd;
    {&quot;Key&quot; : &quot;ClientSecret&quot;,   &quot;Value&quot; : &quot;${AZURE_CLIENT_SECRET}&quot;},&#xd;
    {&quot;Key&quot; : &quot;TenantId&quot;,       &quot;Value&quot; : &quot;${AZURE_TENANT_ID}&quot;},&#xd;
    {&quot;Key&quot; : &quot;SubscriptionId&quot;, &quot;Value&quot; : &quot;${AZURE_SUBSCRIPTION_ID}&quot;}&#xd;
]}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/spider/credential</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If OpenStack" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;CSP&quot;)==&quot;openstack&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">true</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OPENSTACK Credential생성" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;CredentialName&quot;   : &quot;credential-${CSP}-${REGION}&quot;,&#xd;
&quot;ProviderName&quot;     : &quot;${CSP_UPPER}&quot;,&#xd;
&quot;KeyValueInfoList&quot; : [&#xd;
    {&quot;Key&quot; : &quot;IdentityEndpoint&quot;, &quot;Value&quot; : &quot;${OS_AUTH_URL}&quot;},&#xd;
    {&quot;Key&quot; : &quot;Username&quot;,         &quot;Value&quot; : &quot;${OS_USERNAME}&quot;},&#xd;
    {&quot;Key&quot; : &quot;Password&quot;,         &quot;Value&quot; : &quot;${OS_PASSWORD}&quot;},&#xd;
    {&quot;Key&quot; : &quot;DomainName&quot;,       &quot;Value&quot; : &quot;${OS_USER_DOMAIN_NAME}&quot;},&#xd;
    {&quot;Key&quot; : &quot;ProjectID&quot;,        &quot;Value&quot; : &quot;${OS_PROJECT_ID}&quot;}&#xd;
]}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/spider/credential</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ALIBABA" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;CSP&quot;)==&quot;alibaba&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ALIBABA Credential생성" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;CredentialName&quot;   : &quot;credential-${CSP}-${REGION}&quot;,&#xd;
&quot;ProviderName&quot;     : &quot;${CSP_UPPER}&quot;,&#xd;
&quot;KeyValueInfoList&quot; : [&#xd;
    {&quot;Key&quot; : &quot;ClientId&quot;,     &quot;Value&quot; : &quot;${ALIBABA_SECRET_ID}&quot;},&#xd;
    {&quot;Key&quot; : &quot;ClientSecret&quot;, &quot;Value&quot; : &quot;${ALIBABA_SECRET_KEY}&quot;}&#xd;
]}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/spider/credential</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If TENCENT" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;CSP&quot;)==&quot;tencent&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TENCENT Credential생성" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;CredentialName&quot;   : &quot;credential-${CSP}-${REGION}&quot;,&#xd;
&quot;ProviderName&quot;     : &quot;${CSP_UPPER}&quot;,&#xd;
&quot;KeyValueInfoList&quot; : [&#xd;
    {&quot;Key&quot; : &quot;ClientId&quot;,     &quot;Value&quot; : &quot;${TENCENT_SECRET_ID}&quot;},&#xd;
    {&quot;Key&quot; : &quot;ClientSecret&quot;, &quot;Value&quot; : &quot;${TENCENT_SECRET_KEY}&quot;}&#xd;
]}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/spider/credential</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If TENCENT" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;CSP&quot;)==&quot;tencent&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TENCENT Credential생성" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;CredentialName&quot;   : &quot;credential-${CSP}-${REGION}&quot;,&#xd;
&quot;ProviderName&quot;     : &quot;${CSP_UPPER}&quot;,&#xd;
&quot;KeyValueInfoList&quot; : [&#xd;
    {&quot;Key&quot; : &quot;ClientId&quot;,     &quot;Value&quot; : &quot;${TENCENT_SECRET_ID}&quot;},&#xd;
    {&quot;Key&quot; : &quot;ClientSecret&quot;, &quot;Value&quot; : &quot;${TENCENT_SECRET_KEY}&quot;}&#xd;
]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/spider/credential</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If IBM" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;CSP&quot;)==&quot;ibm&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IBM Credential생성" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;CredentialName&quot;   : &quot;credential-${CSP}-${REGION}&quot;,&#xd;
&quot;ProviderName&quot;     : &quot;${CSP_UPPER}&quot;,&#xd;
&quot;KeyValueInfoList&quot; : [&#xd;
    {&quot;Key&quot; : &quot;ApiKey&quot;,     &quot;Value&quot; : &quot;${IBM_API_KEY}&quot;}&#xd;
]}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/spider/credential</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If TENCENT" enabled="true">
                  <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;CSP&quot;)==&quot;tencent&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TENCENT Credential생성" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;CredentialName&quot;   : &quot;credential-${CSP}-${REGION}&quot;,&#xd;
&quot;ProviderName&quot;     : &quot;${CSP_UPPER}&quot;,&#xd;
&quot;KeyValueInfoList&quot; : [&#xd;
    {&quot;Key&quot; : &quot;ClientId&quot;,     &quot;Value&quot; : &quot;${TENCENT_SECRET_ID}&quot;},&#xd;
    {&quot;Key&quot; : &quot;ClientSecret&quot;, &quot;Value&quot; : &quot;${TENCENT_SECRET_KEY}&quot;}&#xd;
]}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/spider/credential</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${CSP_UPPER} Connection 조회" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/spider/connectionconfig/${c_CONFIG}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Connection 없다면" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;StatusCode&quot;)!=&quot;200&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${CSP_UPPER} Connection 생성" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;ConfigName&quot;     : &quot;${c_CONFIG}&quot;,&#xd;
&quot;ProviderName&quot;   : &quot;${CSP_UPPER}&quot;, &#xd;
&quot;DriverName&quot;     : &quot;${CSP}-driver-v1.0&quot;, &#xd;
&quot;CredentialName&quot; : &quot;credential-${CSP}-${REGION}&quot;, &#xd;
&quot;RegionName&quot;     : &quot;region-${CSP}-${REGION}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/spider/connectionconfig</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="&lt;LargeScaleCluster&gt;" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="변수정의" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;c_CLUSTER&quot;, 	&quot;${CLUSTER}&quot;);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cluster 조회" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_MCKS}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mcks/ns/${NAMESPACE}/clusters/${c_CLUSTER}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Cluster 존재하면 삭제 " enabled="true">
            <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;StatusCode&quot;)==&quot;200&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cluster 삭제" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT_MCKS}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mcks/ns/${NAMESPACE}/clusters/${c_CLUSTER}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cluster 생성" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;name&quot;: &quot;${c_CLUSTER}&quot;,&#xd;
   &quot;label&quot;: &quot;lab.&quot;,&#xd;
   &quot;description&quot;: &quot;create a cluster test&quot;,&#xd;
   &quot;controlPlane&quot;: [&#xd;
      { &quot;connection&quot;: &quot;config-aws-${REGION}&quot;, &quot;count&quot;: 3, &quot;spec&quot;: &quot;${AWS_SPEC}&quot; }&#xd;
   ],&#xd;
   &quot;worker&quot;: [&#xd;
      { &quot;connection&quot;: &quot;config-aws-${REGION}&quot;, &quot;count&quot;: 10, &quot;spec&quot;: &quot;${AWS_SPEC}&quot; },&#xd;
      { &quot;connection&quot;: &quot;config-gcp-${REGION}&quot;, &quot;count&quot;: 10, &quot;spec&quot;: &quot;${GCP_SPEC}&quot; },&#xd;
      { &quot;connection&quot;: &quot;config-azure-${REGION}&quot;, &quot;count&quot;: 10, &quot;spec&quot;: &quot;${AZURE_SPEC}&quot; },&#xd;
      { &quot;connection&quot;: &quot;config-alibaba-${REGION}&quot;, &quot;count&quot;: 10, &quot;spec&quot;: &quot;${ALIBABA_SPEC}&quot; },&#xd;
      { &quot;connection&quot;: &quot;config-tencent-${REGION}&quot;, &quot;count&quot;: 10, &quot;spec&quot;: &quot;${TENCENT_SPEC}&quot; }&#xd;
    ],&#xd;
    &quot;config&quot;: {&#xd;
        &quot;kubernetes&quot;: {&#xd;
            &quot;networkCni&quot;: &quot;kilo&quot;,&#xd;
            &quot;podCidr&quot;: &quot;10.244.0.0/16&quot;,&#xd;
            &quot;serviceCidr&quot;: &quot;10.96.0.0/12&quot;,&#xd;
            &quot;serviceDnsDomain&quot;: &quot;cluster.local&quot;&#xd;
        }&#xd;
    }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_MCKS}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mcks/ns/${NAMESPACE}/clusters</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cluster 삭제" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_MCKS}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mcks/ns/${NAMESPACE}/clusters/${c_CLUSTER}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="&lt;Clean-up&gt;" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MCIS Image 삭제" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_TUMBLEBUG}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tumblebug/ns/${NAMESPACE}/resources/image</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${H_AUTH}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query"></stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">if(!ctx.getPreviousResult().getResponseCode().equals(&quot;500&quot;)) prev.setResponseOK();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MCIS Spec 삭제" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_TUMBLEBUG}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tumblebug/ns/${NAMESPACE}/resources/spec</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${H_AUTH}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MCIS SSHKey 삭제" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_TUMBLEBUG}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tumblebug/ns/${NAMESPACE}/resources/sshKey</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${H_AUTH}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MCIS SecurityGroup 삭제" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_TUMBLEBUG}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tumblebug/ns/${NAMESPACE}/resources/securityGroup</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${H_AUTH}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MCIS VPC 삭제" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_TUMBLEBUG}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tumblebug/ns/${NAMESPACE}/resources/vNet</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${H_AUTH}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach CSP" enabled="true">
            <stringProp name="ForeachController.inputVal">CSP</stringProp>
            <stringProp name="ForeachController.returnVal">CSP</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="변수정의" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String c_region = &quot;&quot;;
String c_zone = &quot;&quot;;
if(&quot;${CSP}&quot;.equals(&quot;aws&quot;)) {
	if (&quot;${REGION}&quot;.equals(&quot;seoul&quot;))		{ c_region = &quot;ap-northeast-2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;tokyo&quot;))		{ c_region = &quot;ap-northeast-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;singapore&quot;))	{ c_region = &quot;ap-southeast-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;usca&quot;)) 		{ c_region = &quot;us-west-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;london&quot;))		{ c_region = &quot;eu-west-2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;india&quot;))		{ c_region = &quot;ap-south-1&quot;; }
	c_zone = c_region + &quot;a&quot;;
}

if(&quot;${CSP}&quot;.equals(&quot;gcp&quot;)) {
	if (&quot;${REGION}&quot;.equals(&quot;seoul&quot;))		{ c_region = &quot;asia-northeast3&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;tokyo&quot;))		{ c_region = &quot;asia-northeast1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;singapore&quot;))	{ c_region = &quot;asia-southeast1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;usca&quot;)) 		{ c_region = &quot;us-west2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;london&quot;))		{ c_region = &quot;europe-west2&quot;; }
	c_zone = c_region + &quot;-a&quot;;
}

if(&quot;${CSP}&quot;.equals(&quot;azure&quot;)) {
	if (&quot;${REGION}&quot;.equals(&quot;seoul&quot;))		{ c_region = &quot;koreacentral&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;tokyo&quot;))		{ c_region = &quot;japaneast&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;singapore&quot;))	{ c_region = &quot;southeastasia&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;usca&quot;)) 		{ c_region = &quot;westus&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;london&quot;))		{ c_region = &quot;uksouth&quot;; }
	c_zone = &quot;*&quot;;
}

if(&quot;${CSP}&quot;.equals(&quot;alibaba&quot;)) {
//	if (&quot;${REGION}&quot;.equals(&quot;seoul&quot;))		{ c_region = &quot;&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;tokyo&quot;))		{ c_region = &quot;ap-northeast-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;singapore&quot;))	{ c_region = &quot;ap-southeast-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;usca&quot;)) 		{ c_region = &quot;us-west-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;london&quot;))		{ c_region = &quot;eu-west-1&quot;; }
	c_zone = c_region + &quot;a&quot;;
}

if(&quot;${CSP}&quot;.equals(&quot;tencent&quot;)) {
	if (&quot;${REGION}&quot;.equals(&quot;seoul&quot;))		{ c_region = &quot;ap-seoul&quot;;			c_zone = c_region + &quot;-2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;tokyo&quot;))		{ c_region = &quot;ap-tokyo&quot;;			c_zone = c_region + &quot;-2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;singapore&quot;))	{ c_region = &quot;ap-singapore&quot;;		c_zone = c_region + &quot;-1&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;usca&quot;)) 		{ c_region = &quot;na-siliconvalley&quot;;	c_zone = c_region + &quot;-2&quot;; }
	if (&quot;${REGION}&quot;.equals(&quot;london&quot;))		{ c_region = &quot;eu-frankfurt&quot;;		c_zone = c_region + &quot;-1&quot;; }
}

if(&quot;${CSP}&quot;.equals(&quot;openstack&quot;)) {
	c_region	= &quot;${OS_REGION_NAME}&quot;;
	c_zone	= c_region;
}


vars.put(&quot;CSP_UPPER&quot;, 	&quot;${CSP}&quot;.toUpperCase());
vars.put(&quot;c_CONFIG&quot;, 	&quot;config-${CSP}-${REGION}&quot;);
vars.put(&quot;c_REGION&quot;,	c_region);
vars.put(&quot;c_ZONE&quot;,		c_zone);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Connection 삭제" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/spider/connectionconfig/${c_CONFIG}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Credential 삭제" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/spider/credential/credential-${CSP}-${REGION}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Region 삭제" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/spider/region/region-${CSP}-${REGION}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Driver 삭제" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT_SPIDER}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/spider/driver/${CSP}-driver-v1.0</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NS 삭제" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_TUMBLEBUG}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/tumblebug/ns/${NAMESPACE}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${H_AUTH}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="응답처리" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;StatusCode&quot;,ctx.getPreviousResult().getResponseCode());
prev.setResponseOK();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="시험결과" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="시험결과(종합)" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
